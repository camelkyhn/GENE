using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Gene.Middleware.Entities.Core;
using Gene.Middleware.Entities.Identity;
using Gene.Middleware.System;
using Gene.Storage.Extensions;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;

namespace Gene.Storage
{
    public class DatabaseContext : DbContext
    {
        private readonly AppConfiguration _configuration;

        public DbSet<Action> Actions { get; set; }
        public DbSet<Area> Areas { get; set; }
        public DbSet<Controller> Controllers { get; set; }
        public DbSet<ControllerAction> ControllerActions { get; set; }
        public DbSet<ControllerActionRole> ControllerActionRoles { get; set; }
        public DbSet<EntityHistoryRecord> EntityHistoryRecords { get; set; }

        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<Notification> Notifications { get; set; }

        public bool IsHistoryDisabled { get; set; }

        public DatabaseContext(DbContextOptions<DatabaseContext> options, IOptions<AppConfiguration> configurationOptions) : base(options)
        {
            _configuration = configurationOptions.Value;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(_configuration.DbConnectionString);
            }
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            #region To Table

            builder.ToCoreTables();

            builder.ToIdentityTables();

            #endregion

            #region Relations

            builder.AddCoreRelations();

            builder.AddIdentityRelations();

            builder.AddCreatedUserRelations();

            builder.AddUpdatedUserRelations();

            #endregion
        }

        public override int SaveChanges()
        {
            if (IsHistoryDisabled)
            {
                return base.SaveChanges();
            }

            var entityHistoryRecordEntries = OnBeforeSaveChanges();
            var result                     = base.SaveChanges();
            OnAfterSaveChangesAsync(entityHistoryRecordEntries).GetAwaiter().GetResult();
            return result;
        }

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = new())
        {
            if (IsHistoryDisabled)
            {
                return await base.SaveChangesAsync(cancellationToken);
            }

            var entityHistoryRecordEntries = OnBeforeSaveChanges();
            var result                     = await base.SaveChangesAsync(cancellationToken);
            await OnAfterSaveChangesAsync(entityHistoryRecordEntries);
            return result;
        }

        private List<EntityHistoryRecordEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var entityHistoryRecordEntries = new List<EntityHistoryRecordEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (!EntityConfiguration.TrackableList.Contains(entry.Entity.GetType()))
                {
                    continue;
                }

                if (entry.Entity is EntityHistoryRecord || entry.State is EntityState.Detached or EntityState.Unchanged or EntityState.Deleted)
                {
                    continue;
                }

                var includedPropertyEntries = entry.Properties.Where(pe => !EntityConfiguration.IgnoredProperties.Contains(pe.Metadata.Name)).ToList();
                if (!includedPropertyEntries.Any(pe => pe.IsModified))
                {
                    continue;
                }

                var entityHistoryRecordEntry = new EntityHistoryRecordEntry
                {
                    EntityName = entry.Metadata.GetTableName()
                };
                entityHistoryRecordEntries.Add(entityHistoryRecordEntry);
                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // Value will be generated by the database, get the value after saving
                        entityHistoryRecordEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    if (property.Metadata.IsPrimaryKey())
                    {
                        entityHistoryRecordEntry.EntityId = property.CurrentValue.ToString();
                        continue;
                    }

                    var propertyName = property.Metadata.Name;
                    entityHistoryRecordEntry.Values[propertyName] = property.CurrentValue;
                }
            }

            // TODO: If only ignored properties changed, then don't add an entity history record
            // Save entity history record entities that have all the modifications
            foreach (var historyRecordEntry in entityHistoryRecordEntries.Where(_ => !_.HasTemporaryProperties))
            {
                EntityHistoryRecords.Add(historyRecordEntry.ToEntityHistoryRecord());
            }

            // Keep a list of entries where the value of some properties are unknown at this step
            return entityHistoryRecordEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChangesAsync(List<EntityHistoryRecordEntry> entityHistoryRecordEntries)
        {
            if (entityHistoryRecordEntries == null || entityHistoryRecordEntries.Count == 0)
            {
                return Task.CompletedTask;
            }

            foreach (var entityHistoryRecordEntry in entityHistoryRecordEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in entityHistoryRecordEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        entityHistoryRecordEntry.EntityId = prop.CurrentValue.ToString();
                    }
                    else
                    {
                        entityHistoryRecordEntry.Values[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the EntityHistoryRecord entry
                EntityHistoryRecords.Add(entityHistoryRecordEntry.ToEntityHistoryRecord());
            }

            return SaveChangesAsync();
        }
    }
}